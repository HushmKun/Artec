name: Publish Artec to TestPypi

on:
  push:
    branches:
      - 'development' 

jobs:

  Test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --ignore=E101,W191
    - name: Test with pytest
      run: |
        pytest -v

  build:
    needs: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user 
    - name: Build a binary wheel and a source tarball
      run: >-
        python3 -m
        build
        --sdist
        --wheel
        --outdir ~/dist/
        .
    - name: Upload Builds
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Restore Builds
        id: cache-builds
        uses: actions/cache/restore@v3
        with:
          path: ~/dist
          key: ${{ runner.os }}-build
      - uses: actions/download-artifact@v2
        with:
          name: build
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API }}
          repository-url: https://test.pypi.org/legacy/
          packages-dir: dist

